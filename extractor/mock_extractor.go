// Code generated by mockery v1.0.0. DO NOT EDIT.

package extractor

import context "context"
import digest "github.com/opencontainers/go-digest"
import mock "github.com/stretchr/testify/mock"

// MockExtractor is an autogenerated mock type for the Extractor type
type MockExtractor struct {
	mock.Mock
}

type ExtractLayerFilesArgs struct {
	Ctx               context.Context
	CtxAnything       bool
	Dig               digest.Digest
	DigAnything       bool
	Filenames         []string
	FilenamesAnything bool
}

type ExtractLayerFilesReturns struct {
	DecompressedLayerId digest.Digest
	Files               FileMap
	OpqDirs             []string
	WhFiles             []string
	Err                 error
}

type ExtractLayerFilesExpectation struct {
	Args    ExtractLayerFilesArgs
	Returns ExtractLayerFilesReturns
}

func (_m *MockExtractor) ApplyExtractLayerFilesExpectation(e ExtractLayerFilesExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	if e.Args.DigAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Dig)
	}
	if e.Args.FilenamesAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Filenames)
	}
	_m.On("ExtractLayerFiles", args...).Return(e.Returns.DecompressedLayerId, e.Returns.Files, e.Returns.OpqDirs, e.Returns.WhFiles, e.Returns.Err)
}

func (_m *MockExtractor) ApplyExtractLayerFilesExpectations(expectations []ExtractLayerFilesExpectation) {
	for _, e := range expectations {
		_m.ApplyExtractLayerFilesExpectation(e)
	}
}

// ExtractLayerFiles provides a mock function with given fields: ctx, dig, filenames
func (_m *MockExtractor) ExtractLayerFiles(ctx context.Context, dig digest.Digest, filenames []string) (digest.Digest, FileMap, []string, []string, error) {
	ret := _m.Called(ctx, dig, filenames)

	var r0 digest.Digest
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest, []string) digest.Digest); ok {
		r0 = rf(ctx, dig, filenames)
	} else {
		r0 = ret.Get(0).(digest.Digest)
	}

	var r1 FileMap
	if rf, ok := ret.Get(1).(func(context.Context, digest.Digest, []string) FileMap); ok {
		r1 = rf(ctx, dig, filenames)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(FileMap)
		}
	}

	var r2 []string
	if rf, ok := ret.Get(2).(func(context.Context, digest.Digest, []string) []string); ok {
		r2 = rf(ctx, dig, filenames)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]string)
		}
	}

	var r3 []string
	if rf, ok := ret.Get(3).(func(context.Context, digest.Digest, []string) []string); ok {
		r3 = rf(ctx, dig, filenames)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).([]string)
		}
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(context.Context, digest.Digest, []string) error); ok {
		r4 = rf(ctx, dig, filenames)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

type ImageIDReturns struct {
	ImageDigest digest.Digest
}

type ImageIDExpectation struct {
	Returns ImageIDReturns
}

func (_m *MockExtractor) ApplyImageIDExpectation(e ImageIDExpectation) {
	var args []interface{}
	_m.On("ImageID", args...).Return(e.Returns.ImageDigest)
}

func (_m *MockExtractor) ApplyImageIDExpectations(expectations []ImageIDExpectation) {
	for _, e := range expectations {
		_m.ApplyImageIDExpectation(e)
	}
}

// ImageID provides a mock function with given fields:
func (_m *MockExtractor) ImageID() digest.Digest {
	ret := _m.Called()

	var r0 digest.Digest
	if rf, ok := ret.Get(0).(func() digest.Digest); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(digest.Digest)
	}

	return r0
}

type ImageNameReturns struct {
	ImageName string
}

type ImageNameExpectation struct {
	Returns ImageNameReturns
}

func (_m *MockExtractor) ApplyImageNameExpectation(e ImageNameExpectation) {
	var args []interface{}
	_m.On("ImageName", args...).Return(e.Returns.ImageName)
}

func (_m *MockExtractor) ApplyImageNameExpectations(expectations []ImageNameExpectation) {
	for _, e := range expectations {
		_m.ApplyImageNameExpectation(e)
	}
}

// ImageName provides a mock function with given fields:
func (_m *MockExtractor) ImageName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type LayerIDsReturns struct {
	LayerIDs []string
}

type LayerIDsExpectation struct {
	Returns LayerIDsReturns
}

func (_m *MockExtractor) ApplyLayerIDsExpectation(e LayerIDsExpectation) {
	var args []interface{}
	_m.On("LayerIDs", args...).Return(e.Returns.LayerIDs)
}

func (_m *MockExtractor) ApplyLayerIDsExpectations(expectations []LayerIDsExpectation) {
	for _, e := range expectations {
		_m.ApplyLayerIDsExpectation(e)
	}
}

// LayerIDs provides a mock function with given fields:
func (_m *MockExtractor) LayerIDs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

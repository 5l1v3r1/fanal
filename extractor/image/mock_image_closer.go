// Code generated by mockery v1.0.0. DO NOT EDIT.

package image

import context "context"
import mock "github.com/stretchr/testify/mock"
import types "github.com/containers/image/v5/types"

// MockImageCloser is an autogenerated mock type for the ImageCloser type
type MockImageCloser struct {
	mock.Mock
}

type ImageCloserCloseReturns struct {
	_a0 error
}

type ImageCloserCloseExpectation struct {
	Returns ImageCloserCloseReturns
}

func (_m *MockImageCloser) ApplyCloseExpectation(e ImageCloserCloseExpectation) {
	var args []interface{}
	_m.On("Close", args...).Return(e.Returns._a0)
}

func (_m *MockImageCloser) ApplyCloseExpectations(expectations []ImageCloserCloseExpectation) {
	for _, e := range expectations {
		_m.ApplyCloseExpectation(e)
	}
}

// Close provides a mock function with given fields:
func (_m *MockImageCloser) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ImageCloserConfigBlobArgs struct {
	_a0         context.Context
	_a0Anything bool
}

type ImageCloserConfigBlobReturns struct {
	_a0 []byte
	_a1 error
}

type ImageCloserConfigBlobExpectation struct {
	Args    ImageCloserConfigBlobArgs
	Returns ImageCloserConfigBlobReturns
}

func (_m *MockImageCloser) ApplyConfigBlobExpectation(e ImageCloserConfigBlobExpectation) {
	var args []interface{}
	if e.Args._a0Anything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args._a0)
	}
	_m.On("ConfigBlob", args...).Return(e.Returns._a0, e.Returns._a1)
}

func (_m *MockImageCloser) ApplyConfigBlobExpectations(expectations []ImageCloserConfigBlobExpectation) {
	for _, e := range expectations {
		_m.ApplyConfigBlobExpectation(e)
	}
}

// ConfigBlob provides a mock function with given fields: _a0
func (_m *MockImageCloser) ConfigBlob(_a0 context.Context) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ImageCloserConfigInfoReturns struct {
	_a0 types.BlobInfo
}

type ImageCloserConfigInfoExpectation struct {
	Returns ImageCloserConfigInfoReturns
}

func (_m *MockImageCloser) ApplyConfigInfoExpectation(e ImageCloserConfigInfoExpectation) {
	var args []interface{}
	_m.On("ConfigInfo", args...).Return(e.Returns._a0)
}

func (_m *MockImageCloser) ApplyConfigInfoExpectations(expectations []ImageCloserConfigInfoExpectation) {
	for _, e := range expectations {
		_m.ApplyConfigInfoExpectation(e)
	}
}

// ConfigInfo provides a mock function with given fields:
func (_m *MockImageCloser) ConfigInfo() types.BlobInfo {
	ret := _m.Called()

	var r0 types.BlobInfo
	if rf, ok := ret.Get(0).(func() types.BlobInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.BlobInfo)
	}

	return r0
}

type ImageCloserLayerInfosReturns struct {
	LayerInfos []types.BlobInfo
}

type ImageCloserLayerInfosExpectation struct {
	Returns ImageCloserLayerInfosReturns
}

func (_m *MockImageCloser) ApplyLayerInfosExpectation(e ImageCloserLayerInfosExpectation) {
	var args []interface{}
	_m.On("LayerInfos", args...).Return(e.Returns.LayerInfos)
}

func (_m *MockImageCloser) ApplyLayerInfosExpectations(expectations []ImageCloserLayerInfosExpectation) {
	for _, e := range expectations {
		_m.ApplyLayerInfosExpectation(e)
	}
}

// LayerInfos provides a mock function with given fields:
func (_m *MockImageCloser) LayerInfos() []types.BlobInfo {
	ret := _m.Called()

	var r0 []types.BlobInfo
	if rf, ok := ret.Get(0).(func() []types.BlobInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.BlobInfo)
		}
	}

	return r0
}

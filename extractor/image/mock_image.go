// Code generated by mockery v1.0.0. DO NOT EDIT.

package image

import context "context"
import digest "github.com/opencontainers/go-digest"
import io "io"
import mock "github.com/stretchr/testify/mock"
import types "github.com/containers/image/v5/types"

// MockImage is an autogenerated mock type for the Image type
type MockImage struct {
	mock.Mock
}

type ImageConfigBlobArgs struct {
	_a0         context.Context
	_a0Anything bool
}

type ImageConfigBlobReturns struct {
	_a0 []byte
	_a1 error
}

type ImageConfigBlobExpectation struct {
	Args    ImageConfigBlobArgs
	Returns ImageConfigBlobReturns
}

func (_m *MockImage) ApplyConfigBlobExpectation(e ImageConfigBlobExpectation) {
	var args []interface{}
	if e.Args._a0Anything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args._a0)
	}
	_m.On("ConfigBlob", args...).Return(e.Returns._a0, e.Returns._a1)
}

func (_m *MockImage) ApplyConfigBlobExpectations(expectations []ImageConfigBlobExpectation) {
	for _, e := range expectations {
		_m.ApplyConfigBlobExpectation(e)
	}
}

// ConfigBlob provides a mock function with given fields: _a0
func (_m *MockImage) ConfigBlob(_a0 context.Context) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ImageConfigInfoReturns struct {
	_a0 types.BlobInfo
}

type ImageConfigInfoExpectation struct {
	Returns ImageConfigInfoReturns
}

func (_m *MockImage) ApplyConfigInfoExpectation(e ImageConfigInfoExpectation) {
	var args []interface{}
	_m.On("ConfigInfo", args...).Return(e.Returns._a0)
}

func (_m *MockImage) ApplyConfigInfoExpectations(expectations []ImageConfigInfoExpectation) {
	for _, e := range expectations {
		_m.ApplyConfigInfoExpectation(e)
	}
}

// ConfigInfo provides a mock function with given fields:
func (_m *MockImage) ConfigInfo() types.BlobInfo {
	ret := _m.Called()

	var r0 types.BlobInfo
	if rf, ok := ret.Get(0).(func() types.BlobInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.BlobInfo)
	}

	return r0
}

type ImageGetLayerArgs struct {
	Ctx         context.Context
	CtxAnything bool
	Dig         digest.Digest
	DigAnything bool
}

type ImageGetLayerReturns struct {
	Reader io.ReadCloser
	Err    error
}

type ImageGetLayerExpectation struct {
	Args    ImageGetLayerArgs
	Returns ImageGetLayerReturns
}

func (_m *MockImage) ApplyGetLayerExpectation(e ImageGetLayerExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	if e.Args.DigAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Dig)
	}
	_m.On("GetLayer", args...).Return(e.Returns.Reader, e.Returns.Err)
}

func (_m *MockImage) ApplyGetLayerExpectations(expectations []ImageGetLayerExpectation) {
	for _, e := range expectations {
		_m.ApplyGetLayerExpectation(e)
	}
}

// GetLayer provides a mock function with given fields: ctx, dig
func (_m *MockImage) GetLayer(ctx context.Context, dig digest.Digest) (io.ReadCloser, error) {
	ret := _m.Called(ctx, dig)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) io.ReadCloser); ok {
		r0 = rf(ctx, dig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, digest.Digest) error); ok {
		r1 = rf(ctx, dig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ImageLayerIDsReturns struct {
	LayerIDs []string
}

type ImageLayerIDsExpectation struct {
	Returns ImageLayerIDsReturns
}

func (_m *MockImage) ApplyLayerIDsExpectation(e ImageLayerIDsExpectation) {
	var args []interface{}
	_m.On("LayerIDs", args...).Return(e.Returns.LayerIDs)
}

func (_m *MockImage) ApplyLayerIDsExpectations(expectations []ImageLayerIDsExpectation) {
	for _, e := range expectations {
		_m.ApplyLayerIDsExpectation(e)
	}
}

// LayerIDs provides a mock function with given fields:
func (_m *MockImage) LayerIDs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

type ImageNameReturns struct {
	Name string
}

type ImageNameExpectation struct {
	Returns ImageNameReturns
}

func (_m *MockImage) ApplyNameExpectation(e ImageNameExpectation) {
	var args []interface{}
	_m.On("Name", args...).Return(e.Returns.Name)
}

func (_m *MockImage) ApplyNameExpectations(expectations []ImageNameExpectation) {
	for _, e := range expectations {
		_m.ApplyNameExpectation(e)
	}
}

// Name provides a mock function with given fields:
func (_m *MockImage) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
